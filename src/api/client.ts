//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    login(body: LoginDto | undefined): Promise<TokenDto> {
        let url_ = this.baseUrl + "/api/auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<TokenDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TokenDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TokenDto>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    register(body: RegisterDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/auth/register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    kataAdministrationPOST(body: KataDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/kata-administration";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processKataAdministrationPOST(_response);
        });
    }

    protected processKataAdministrationPOST(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    kataAdministrationPUT(body: KataDto | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/kata-administration";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processKataAdministrationPUT(_response);
        });
    }

    protected processKataAdministrationPUT(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param kataId (optional) 
     * @return Success
     */
    kataAdministrationDELETE(kataId: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/kata-administration?";
        if (kataId === null)
            throw new Error("The parameter 'kataId' cannot be null.");
        else if (kataId !== undefined)
            url_ += "kataId=" + encodeURIComponent("" + kataId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processKataAdministrationDELETE(_response);
        });
    }

    protected processKataAdministrationDELETE(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return Success
     */
    kataSearch(kataId: number): Promise<KataDto> {
        let url_ = this.baseUrl + "/api/kata-search/{kataId}";
        if (kataId === undefined || kataId === null)
            throw new Error("The parameter 'kataId' must be defined.");
        url_ = url_.replace("{kataId}", encodeURIComponent("" + kataId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processKataSearch(_response);
        });
    }

    protected processKataSearch(response: Response): Promise<KataDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = KataDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<KataDto>(null as any);
    }

    /**
     * @param kataLanguage (optional) 
     * @param kataType (optional) 
     * @param kataDifficulty (optional) 
     * @return Success
     */
    kataSearchAll(kataLanguage: ProgrammingLanguage | undefined, kataType: KataType | undefined, kataDifficulty: KataDifficulty | undefined): Promise<KataDto[]> {
        let url_ = this.baseUrl + "/api/kata-search?";
        if (kataLanguage === null)
            throw new Error("The parameter 'kataLanguage' cannot be null.");
        else if (kataLanguage !== undefined)
            url_ += "kataLanguage=" + encodeURIComponent("" + kataLanguage) + "&";
        if (kataType === null)
            throw new Error("The parameter 'kataType' cannot be null.");
        else if (kataType !== undefined)
            url_ += "kataType=" + encodeURIComponent("" + kataType) + "&";
        if (kataDifficulty === null)
            throw new Error("The parameter 'kataDifficulty' cannot be null.");
        else if (kataDifficulty !== undefined)
            url_ += "kataDifficulty=" + encodeURIComponent("" + kataDifficulty) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processKataSearchAll(_response);
        });
    }

    protected processKataSearchAll(response: Response): Promise<KataDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(KataDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<KataDto[]>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Success
     */
    kataSolve(body: KataAnswerDto | undefined): Promise<KataSolveResultDto> {
        let url_ = this.baseUrl + "/api/kata-solve";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processKataSolve(_response);
        });
    }

    protected processKataSolve(response: Response): Promise<KataSolveResultDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = KataSolveResultDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<KataSolveResultDto>(null as any);
    }

    /**
     * @return Success
     */
    leaderboard(): Promise<LeaderboardPositionDto[]> {
        let url_ = this.baseUrl + "/api/leaderboard";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLeaderboard(_response);
        });
    }

    protected processLeaderboard(response: Response): Promise<LeaderboardPositionDto[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LeaderboardPositionDto.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LeaderboardPositionDto[]>(null as any);
    }

    /**
     * @return Success
     */
    profileInfo(userId: number): Promise<ProfileInfoDto> {
        let url_ = this.baseUrl + "/api/profile-info/{userId}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processProfileInfo(_response);
        });
    }

    protected processProfileInfo(response: Response): Promise<ProfileInfoDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ProfileInfoDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProfileInfoDto>(null as any);
    }

    /**
     * @param userId (optional) 
     * @return Success
     */
    user(userId: number | undefined): Promise<UserDto> {
        let url_ = this.baseUrl + "/api/user?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUser(_response);
        });
    }

    protected processUser(response: Response): Promise<UserDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserDto.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserDto>(null as any);
    }
}

export enum ActivityStatus {
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export class AnswerOption implements IAnswerOption {
    optionId?: number;
    option?: string | undefined;
    isCorrect?: boolean;

    constructor(data?: IAnswerOption) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.optionId = _data["optionId"];
            this.option = _data["option"];
            this.isCorrect = _data["isCorrect"];
        }
    }

    static fromJS(data: any): AnswerOption {
        data = typeof data === 'object' ? data : {};
        let result = new AnswerOption();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["optionId"] = this.optionId;
        data["option"] = this.option;
        data["isCorrect"] = this.isCorrect;
        return data;
    }
}

export interface IAnswerOption {
    optionId?: number;
    option?: string | undefined;
    isCorrect?: boolean;
}

export class KataAnswerDto implements IKataAnswerDto {
    kataId?: number;
    optionId?: number;

    constructor(data?: IKataAnswerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.kataId = _data["kataId"];
            this.optionId = _data["optionId"];
        }
    }

    static fromJS(data: any): KataAnswerDto {
        data = typeof data === 'object' ? data : {};
        let result = new KataAnswerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kataId"] = this.kataId;
        data["optionId"] = this.optionId;
        return data;
    }
}

export interface IKataAnswerDto {
    kataId?: number;
    optionId?: number;
}

export enum KataDifficulty {
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _20 = 20,
}

export class KataDto implements IKataDto {
    title?: string | undefined;
    programmingLanguage?: ProgrammingLanguage;
    kataDifficulty?: KataDifficulty;
    kataType?: KataType;
    kataRawJsonContent?: KataJsonContent;
    authorId?: number;

    constructor(data?: IKataDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.title = _data["title"];
            this.programmingLanguage = _data["programmingLanguage"];
            this.kataDifficulty = _data["kataDifficulty"];
            this.kataType = _data["kataType"];
            this.kataRawJsonContent = _data["kataRawJsonContent"] ? KataJsonContent.fromJS(_data["kataRawJsonContent"]) : <any>undefined;
            this.authorId = _data["authorId"];
        }
    }

    static fromJS(data: any): KataDto {
        data = typeof data === 'object' ? data : {};
        let result = new KataDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["title"] = this.title;
        data["programmingLanguage"] = this.programmingLanguage;
        data["kataDifficulty"] = this.kataDifficulty;
        data["kataType"] = this.kataType;
        data["kataRawJsonContent"] = this.kataRawJsonContent ? this.kataRawJsonContent.toJSON() : <any>undefined;
        data["authorId"] = this.authorId;
        return data;
    }
}

export interface IKataDto {
    title?: string | undefined;
    programmingLanguage?: ProgrammingLanguage;
    kataDifficulty?: KataDifficulty;
    kataType?: KataType;
    kataRawJsonContent?: KataJsonContent;
    authorId?: number;
}

export class KataJsonContent implements IKataJsonContent {
    kataDescription?: string | undefined;
    sourceCode?: string | undefined;
    answerOptionsRawJson?: string | undefined;
    readonly answerOptions?: AnswerOption[] | undefined;

    constructor(data?: IKataJsonContent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.kataDescription = _data["kataDescription"];
            this.sourceCode = _data["sourceCode"];
            this.answerOptionsRawJson = _data["answerOptionsRawJson"];
            if (Array.isArray(_data["answerOptions"])) {
                (<any>this).answerOptions = [] as any;
                for (let item of _data["answerOptions"])
                    (<any>this).answerOptions!.push(AnswerOption.fromJS(item));
            }
        }
    }

    static fromJS(data: any): KataJsonContent {
        data = typeof data === 'object' ? data : {};
        let result = new KataJsonContent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kataDescription"] = this.kataDescription;
        data["sourceCode"] = this.sourceCode;
        data["answerOptionsRawJson"] = this.answerOptionsRawJson;
        if (Array.isArray(this.answerOptions)) {
            data["answerOptions"] = [];
            for (let item of this.answerOptions)
                data["answerOptions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IKataJsonContent {
    kataDescription?: string | undefined;
    sourceCode?: string | undefined;
    answerOptionsRawJson?: string | undefined;
    answerOptions?: AnswerOption[] | undefined;
}

export class KataSolveResultDto implements IKataSolveResultDto {
    isAnswerCorrect?: boolean;
    error?: string | undefined;

    constructor(data?: IKataSolveResultDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isAnswerCorrect = _data["isAnswerCorrect"];
            this.error = _data["error"];
        }
    }

    static fromJS(data: any): KataSolveResultDto {
        data = typeof data === 'object' ? data : {};
        let result = new KataSolveResultDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isAnswerCorrect"] = this.isAnswerCorrect;
        data["error"] = this.error;
        return data;
    }
}

export interface IKataSolveResultDto {
    isAnswerCorrect?: boolean;
    error?: string | undefined;
}

export enum KataType {
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export class LeaderboardPositionDto implements ILeaderboardPositionDto {
    userId?: number;
    username?: string | undefined;
    rank?: Rank;
    rating?: number;

    constructor(data?: ILeaderboardPositionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.username = _data["username"];
            this.rank = _data["rank"];
            this.rating = _data["rating"];
        }
    }

    static fromJS(data: any): LeaderboardPositionDto {
        data = typeof data === 'object' ? data : {};
        let result = new LeaderboardPositionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["username"] = this.username;
        data["rank"] = this.rank;
        data["rating"] = this.rating;
        return data;
    }
}

export interface ILeaderboardPositionDto {
    userId?: number;
    username?: string | undefined;
    rank?: Rank;
    rating?: number;
}

export class LoginDto implements ILoginDto {
    username?: string | undefined;
    password?: string | undefined;

    constructor(data?: ILoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): LoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new LoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

export interface ILoginDto {
    username?: string | undefined;
    password?: string | undefined;
}

export class ProfileInfoDto implements IProfileInfoDto {
    username?: string | undefined;
    avatarUrl?: string | undefined;
    description?: string | undefined;
    activityStatus?: ActivityStatus;
    userId?: number;

    constructor(data?: IProfileInfoDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.avatarUrl = _data["avatarUrl"];
            this.description = _data["description"];
            this.activityStatus = _data["activityStatus"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): ProfileInfoDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProfileInfoDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["avatarUrl"] = this.avatarUrl;
        data["description"] = this.description;
        data["activityStatus"] = this.activityStatus;
        data["userId"] = this.userId;
        return data;
    }
}

export interface IProfileInfoDto {
    username?: string | undefined;
    avatarUrl?: string | undefined;
    description?: string | undefined;
    activityStatus?: ActivityStatus;
    userId?: number;
}

export enum ProgrammingLanguage {
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
}

export enum Rank {
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _20 = 20,
}

export class RegisterDto implements IRegisterDto {
    email?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;

    constructor(data?: IRegisterDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.username = _data["username"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): RegisterDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["username"] = this.username;
        data["password"] = this.password;
        return data;
    }
}

export interface IRegisterDto {
    email?: string | undefined;
    username?: string | undefined;
    password?: string | undefined;
}

export class TokenDto implements ITokenDto {
    accessToken?: string | undefined;
    userId?: number | undefined;

    constructor(data?: ITokenDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.accessToken = _data["accessToken"];
            this.userId = _data["userId"];
        }
    }

    static fromJS(data: any): TokenDto {
        data = typeof data === 'object' ? data : {};
        let result = new TokenDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["accessToken"] = this.accessToken;
        data["userId"] = this.userId;
        return data;
    }
}

export interface ITokenDto {
    accessToken?: string | undefined;
    userId?: number | undefined;
}

export class UserDto implements IUserDto {
    username?: string | undefined;
    password?: string | undefined;
    email?: string | undefined;
    registrationDate?: Date;
    rank?: Rank;
    rating?: number;
    gitHubProfileId?: number | undefined;
    userProfileId?: number | undefined;
    roleId?: number | undefined;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.username = _data["username"];
            this.password = _data["password"];
            this.email = _data["email"];
            this.registrationDate = _data["registrationDate"] ? new Date(_data["registrationDate"].toString()) : <any>undefined;
            this.rank = _data["rank"];
            this.rating = _data["rating"];
            this.gitHubProfileId = _data["gitHubProfileId"];
            this.userProfileId = _data["userProfileId"];
            this.roleId = _data["roleId"];
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["username"] = this.username;
        data["password"] = this.password;
        data["email"] = this.email;
        data["registrationDate"] = this.registrationDate ? this.registrationDate.toISOString() : <any>undefined;
        data["rank"] = this.rank;
        data["rating"] = this.rating;
        data["gitHubProfileId"] = this.gitHubProfileId;
        data["userProfileId"] = this.userProfileId;
        data["roleId"] = this.roleId;
        return data;
    }
}

export interface IUserDto {
    username?: string | undefined;
    password?: string | undefined;
    email?: string | undefined;
    registrationDate?: Date;
    rank?: Rank;
    rating?: number;
    gitHubProfileId?: number | undefined;
    userProfileId?: number | undefined;
    roleId?: number | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}